/*
 * Copyright 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


import androidx.build.KotlinTarget
import androidx.build.PlatformIdentifier
import androidx.build.SoftwareType
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("AndroidXPlugin")
    id("com.android.library")
    id("androidx.benchmark")
    id("com.squareup.wire")
}

androidXMultiplatform {
    jvm()
    android()
    defaultPlatform(PlatformIdentifier.ANDROID)

    sourceSets {
        commonMain {
            dependencies {
                api(libs.kotlinStdlib)
                api(libs.kotlinCoroutinesCore)
                api(libs.androidx.annotation)

                implementation("androidx.collection:collection:1.4.5")
                implementation(libs.wireRuntime)
                implementation(libs.okio)
            }
        }
        commonTest {
            dependencies {
                implementation(libs.kotlinTestAnnotationsCommon)
                implementation(libs.kotlinTest)
                implementation(libs.kotlinCoroutinesCore)
                implementation(libs.kotlinCoroutinesTest)
            }
        }
        jvmTest {
            dependsOn(commonTest)
            dependencies {
                implementation(libs.kotlinTestJunit)
                implementation(libs.truth)
            }
        }
        jvmMain {
            dependsOn(commonMain)
        }
        androidMain {
            dependsOn(commonMain)
        }
        androidInstrumentedTest {
            dependsOn(commonTest)
            dependencies {
                implementation(projectOrArtifact(":benchmark:benchmark-junit4"))
                implementation(libs.junit)
                implementation(libs.testExtJunit)
                implementation(libs.testCore)
                implementation(libs.testRunner)
                implementation(libs.testRules)
            }
        }
    }
}

// Workarounds for Wire's plugin not setting code generation directory as task output correctly
// See https://github.com/square/wire/issues/3199
tasks.named("multiplatformSourceJar").configure {
    dependsOn(tasks.named("generateCommonMainProtos"))
}

wire {
    kotlin {
        mutableTypes = true
    }
    sourcePath {
        srcDir("src/commonMain/proto")
    }
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        // Make sure to opt-in to expect-actual classes.
        // https://youtrack.jetbrains.com/issue/KT-61573
        freeCompilerArgs += [
                "-Xexpect-actual-classes",
        ]
    }
}

androidx {
    name = "Tracing Driver"
    type = SoftwareType.SNAPSHOT_ONLY_LIBRARY_ONLY_USED_BY_KOTLIN_CONSUMERS
    inceptionYear = "2024"
    description = "AndroidX Tracing Driver"
    metalavaK2UastEnabled = false
    kotlinTarget = KotlinTarget.KOTLIN_2_0
}

android {
    namespace = "androidx.tracing.driver"
    defaultConfig {
        minSdk = 23
    }
}
