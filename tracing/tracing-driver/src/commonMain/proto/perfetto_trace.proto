/*
 * Copyright (C) 2021 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

// NOTE: We get away with a copy of the proto definitions here only because in this module
// we are using mutable types. Otherwise benchmark's definitions and this would collide and cause
// builds to fail. Consider re-packaging this to a separate package in the future. b/392165540
package perfetto.protos;

///////////////////////////////////////////////////////////////////////////////
// NOTE: THIS FILE IS A MANUALLY MINIFIED VERSION OF PERFETTO_TRACE.PROTO
///////////////////////////////////////////////////////////////////////////////

message EventName {
  optional uint64 iid = 1;
  optional string name = 2;
}

message InternedData {
  repeated EventName event_names = 2;
}

message TracePacketDefaults {
  optional uint32 timestamp_clock_id = 58;
  optional TrackEventDefaults track_event_defaults = 11;
}

// A random unique ID that identifies the trace.
// This message has been introduced in v32. Prior to that, the UUID was
// only (optionally) present in the TraceConfig.trace_uuid_msb/lsb fields.
message TraceUuid {
  optional int64 msb = 1;
  optional int64 lsb = 2;
}

message ProcessDescriptor {
  required int32 pid = 1; // Making this required to avoid boxing an Int
  repeated string cmdline = 2;
  optional string process_name = 6;
  // Labels can be used to further describe properties of the work performed by
  // the process. For example, these can be used by Chrome renderer process to
  // provide titles of frames being rendered.
  repeated string process_labels = 8;
}

message TrackEvent {
  repeated string categories = 22;
  oneof name_field {
    // interned EventName.
    uint64 name_iid = 10;
    // non-interned variant.
    string name = 23;
  }
  enum Type {
    TYPE_SLICE_BEGIN = 1;
    TYPE_SLICE_END = 2;
    TYPE_INSTANT = 3;
    TYPE_COUNTER = 4;
  }
  optional Type type = 9;
  optional uint64 track_uuid = 11;
  oneof counter_value_field {
    int64 counter_value = 30;
    double double_counter_value = 44;
  }
  repeated uint64 extra_counter_track_uuids = 31;
  repeated int64 extra_counter_values = 12;
  repeated uint64 extra_double_counter_track_uuids = 45;
  repeated double extra_double_counter_values = 46;
  repeated fixed64 flow_ids = 47;
}

message ThreadDescriptor {
  required int32 pid = 1; // Making this required to avoid boxing an Int
  required int32 tid = 2; // Making this required to avoid boxing an Int
  optional string thread_name = 5;
}

message CounterDescriptor {
  // Built-in counters, usually with special meaning in the client library,
  // trace processor, legacy JSON format, or UI. Trace processor will infer a
  // track name from the enum value if none is provided in TrackDescriptor.
  enum BuiltinCounterType {
    COUNTER_UNSPECIFIED = 0;

    // Thread-scoped counters. The thread's track should be specified via
    // |parent_uuid| in the TrackDescriptor for such a counter.

    // implies UNIT_TIME_NS.
    COUNTER_THREAD_TIME_NS = 1;

    // implies UNIT_COUNT.
    COUNTER_THREAD_INSTRUCTION_COUNT = 2;
  }

  // Type of the values for the counters - to supply lower granularity units,
  // see also |unit_multiplier|.
  enum Unit {
    UNIT_UNSPECIFIED = 0;
    UNIT_TIME_NS = 1;
    UNIT_COUNT = 2;
    UNIT_SIZE_BYTES = 3;
  }

  // For built-in counters (e.g. thread time). Custom user-specified counters
  // (e.g. those emitted by TRACE_COUNTER macros of the client library)
  // shouldn't set this, and instead provide a counter name via TrackDescriptor.
  optional BuiltinCounterType type = 1;

  // Names of categories of the counter (usually for user-specified counters).
  // In the client library, categories are a way to turn groups of individual
  // counters (or events) on or off.
  repeated string categories = 2;

  // Type of the counter's values. Built-in counters imply a value for this
  // field.
  optional Unit unit = 3;

  // In order to use a unit not defined as a part of |Unit|, a free-form unit
  // name can be used instead.
  optional string unit_name = 6;

  // Multiplication factor of this counter's values, e.g. to supply
  // COUNTER_THREAD_TIME_NS timestamps in microseconds instead.
  optional int64 unit_multiplier = 4;

  // Whether values for this counter are provided as delta values. Only
  // supported for counters that are emitted on a single packet-sequence (e.g.
  // thread time). Counter values in subsequent packets on the current packet
  // sequence will be interpreted as delta values from the sequence's most
  // recent value for the counter. When incremental state is cleared, the
  // counter value is considered to be reset to 0. Thus, the first value after
  // incremental state is cleared is effectively an absolute value.
  optional bool is_incremental = 5;
}

message TrackDescriptor {
  optional uint64 uuid = 1;
  optional string name = 2;
  optional uint64 parent_uuid = 5;
  optional ProcessDescriptor process = 3;
  optional ThreadDescriptor thread = 4;
  optional CounterDescriptor counter = 8;
  optional bool disallow_merging_with_system_tracks = 9;
}

message TrackEventDefaults {
  optional uint64 track_uuid = 11;
}

message TracePacket {
  required uint64 timestamp = 8; // Making this required to avoid boxing
  optional uint32 timestamp_clock_id = 58;
  oneof data {
    TrackEvent track_event = 11;
    TrackDescriptor track_descriptor = 60;
    TraceUuid trace_uuid = 89;
    bytes compressed_packets = 50; // kept for testing purposes
  }
  optional uint32 trusted_packet_sequence_id = 10;
  optional InternedData interned_data = 12;

  enum SequenceFlags {
    SEQ_UNSPECIFIED = 0;
    SEQ_INCREMENTAL_STATE_CLEARED = 1;
    SEQ_NEEDS_INCREMENTAL_STATE = 2;
  };
  optional uint32 sequence_flags = 13;
  optional bool incremental_state_cleared = 41;
  optional TracePacketDefaults trace_packet_defaults = 59;
}

message Trace {
  repeated TracePacket packet = 1;
}
